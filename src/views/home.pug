extends includes/layout

block content
    .namespace-container
        .namespace-section
            .namespace-header
                .namespace-title Our Circle (8080)
                .namespace-controls
                    button.sync-button(onclick="syncNamespace('our-circle')") Sync
            iframe#frame-our-circle.namespace-frame(
                src="http://localhost:8080/#{coinName}/home"
                allow="camera; microphone; geolocation"
            )

        .namespace-section
            .namespace-header
                .namespace-title Itay's Circle (8081)
                .namespace-controls
                    button.sync-button(onclick="syncNamespace('itay-circle')") Sync
            iframe#frame-itay-circle.namespace-frame(
                src="http://localhost:8081/#{coinName}/home"
                allow="camera; microphone; geolocation"
            )

        .namespace-section
            .namespace-header
                .namespace-title Shiriloo's Circle (8082)
                .namespace-controls
                    button.sync-button(onclick="syncNamespace('shiriloo-circle')") Sync
            iframe#frame-shiriloo-circle.namespace-frame(
                src="http://localhost:8082/#{coinName}/home"
                allow="camera; microphone; geolocation"
            )

    script.
        // Handle messages from iFrames
        window.addEventListener('message', function(event) {
            const { type, data } = event.data;
            
            switch(type) {
                case 'chainSync':
                    handleChainSync(data);
                    break;
                case 'transaction':
                    handleTransaction(data);
                    break;
                case 'block':
                    handleBlock(data);
                    break;
            }
        });

        function handleChainSync(data) {
            const { blockchainName, chain } = data;
            // Broadcast chain sync to other namespaces
            broadcastToOtherNamespaces({
                type: 'chainSync',
                data: { blockchainName, chain }
            });
        }

        function handleTransaction(data) {
            const { blockchainName, transaction } = data;
            // Broadcast transaction to other namespaces
            broadcastToOtherNamespaces({
                type: 'transaction',
                data: { blockchainName, transaction }
            });
        }

        function handleBlock(data) {
            const { blockchainName, block } = data;
            // Broadcast block to other namespaces
            broadcastToOtherNamespaces({
                type: 'block',
                data: { blockchainName, block }
            });
        }

        function broadcastToOtherNamespaces(message) {
            const frames = document.querySelectorAll('.namespace-frame');
            frames.forEach(frame => {
                if (frame.contentWindow) {
                    frame.contentWindow.postMessage(message, '*');
                }
            });
        }

        // Initialize WebSocket connections for each namespace
        const namespaces = ['our-circle', 'itay-circle', 'shiriloo-circle'];
        const ports = [8080, 8081, 8082];
        
        namespaces.forEach((namespace, index) => {
            const ws = new WebSocket(`ws://localhost:${ports[index]}`);
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                const frame = document.getElementById(`frame-${namespace}`);
                if (frame && frame.contentWindow) {
                    frame.contentWindow.postMessage(data, '*');
                }
            };
        });